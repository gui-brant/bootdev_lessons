class Human:
    def __init__(self, pos_x, pos_y, speed):
        self.__pos_x = pos_x
        self.__pos_y = pos_y
        self.__speed = speed

    def move_right(self):
        self.__pos_x += self.__speed

    def move_left(self):
        self.__pos_x-=self.__speed

    def move_up(self):
        self.__pos_y+=self.__speed

    def move_down(self):
        self.__pos_y-=self.__speed

    def get_position(self):
        pos_tuple = (self.__pos_x, self.__pos_y)
        return pos_tuple
#You abstract complexity away from the user and encapsulate it within functions
#Abstraction works on the front-end ("abstraction focuses on exposing essential features while hiding complexity"), while encapsulation works on the back-end ("Encapsulation focuses on bundling data with methods and restricting direct access to implementation details").
