def get_filter_cmd(filter_one, filter_two):
    def filter_cmd(content, option="--one"):
        if option == "--one":
            return filter_one(content)
        elif option == "--two":
            return filter_two(content)
        elif option == "--three":
            return filter_two(filter_one(content))
        else:
            raise Exception("invalid option")
        return content
    return filter_cmd

#Keep in mind that function transformation allows your code to be more flexible. The example below showcases why and how, in case you're confused:
    """
    def formatter(pattern):
    def inner_func(text):
        result = ""
        i = 0
        while i < len(pattern):
            if pattern[i:i+2] == '{}':
                result += text
                i += 2
            else:
                result += pattern[i]
                i += 1
        return result
    return inner_func
    bold_formatter = formatter("**{}**")
    italic_formatter = formatter("*{}*")
    bullet_point_formatter = formatter("* {}")
    Now it can be used like this:
        print(bold_formatter("Hello"))
        # **Hello**
        print(italic_formatter("Hello"))
        # *Hello*
        print(bullet_point_formatter("Hello"))
        # * Hello
    Without it, you'd have to define three different functions that look the same. It'd be just more code.
    """
# don't touch below this line


def replace_bad(text):
    return text.replace("bad", "good")


def replace_ellipsis(text):
    return text.replace("..", "...")


def fix_ellipsis(text):
    return text.replace("....", "...")

