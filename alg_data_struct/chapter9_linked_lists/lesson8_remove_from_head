from node import Node

"""
There is an important point to be made here. You always insert at the end of the queue and remove items at the start.
It's actually like a real queue. You add people at the end, but only take people out at the start of it, so that 
the first ones will come out first and the order is followed.
"""
class LLQueue:
    def remove_from_head(self):
        """
        We are removing from the head, so how are we to do that exactly?
        Check condition: list is empty.
        0. If self.head == self.tail, self.tail = None
        1. The old head's node points to nothing. It is out of the loop.
        2. The position self.head is now whatever it pointed to before, meaning head.next.
        """
        if self.head is None:
            return None
        if self.head == self.tail:
            self.tail = None
        old_head = self.head
        self.head = old_head.next
        
        old_head.set_next(None)
        return old_head
    # don't touch below this line

    def add_to_tail(self, node):
        if self.head is None:
            self.head = node
            self.tail = node
            return
        self.tail.set_next(node)
        self.tail = node

    def __init__(self):
        self.tail = None
        self.head = None

    def __iter__(self):
        node = self.head
        while node is not None:
            yield node
            node = node.next

    def __repr__(self):
        nodes = []
        for node in self:
            nodes.append(node.val)
        return " <- ".join(nodes)

